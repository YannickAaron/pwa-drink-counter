// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    profile       UserProfile?
    drinkSessions DrinkSession[]
    onboarded     Boolean        @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Drink Counter App Models

model UserProfile {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // User profile data
    nickname  String?
    age       Int?
    gender    String?
    weight    Float?   // in kg
    
    // Relation to User
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
}

model DrinkSession {
    id        String       @id @default(cuid())
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    date      DateTime     @default(now())
    
    // Relation to User
    user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    
    // Relation to DrinkEntry
    drinks    DrinkEntry[]
    
    // Session stats (calculated)
    totalDrinks Int         @default(0)
    totalAlcohol Float      @default(0) // in grams
    
    @@index([userId, date])
}

model DrinkEntry {
    id        String      @id @default(cuid())
    createdAt DateTime    @default(now())
    timestamp DateTime    @default(now())
    
    // Drink details
    drinkType DrinkType
    volume    Int         // in ml
    
    // Relation to DrinkSession
    session   DrinkSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    sessionId String
    
    @@index([sessionId, timestamp])
}

enum DrinkType {
    BEER
    WINE
    COCKTAIL
    SHOT
}
